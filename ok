    params = {
        "n_estimators": trial.suggest_int("n_estimators", 100, 1000),
        "learning_rate": trial.suggest_float("learning_rate", 1e-3, 0.3, log=True),
        "num_leaves": trial.suggest_int("num_leaves", 20, 150),
        "max_depth": trial.suggest_int("max_depth", 3, 15),
        "min_child_samples": trial.suggest_int("min_child_samples", 5, 100),
        "subsample": trial.suggest_float("subsample", 0.5, 1.0),
        "colsample_bytree": trial.suggest_float("colsample_bytree", 0.5, 1.0),
        "reg_alpha": trial.suggest_float("reg_alpha", 0.0, 10.0),
        "reg_lambda": trial.suggest_float("reg_lambda", 0.0, 10.0),
        "random_state": 42,
        "n_jobs": -1  # ðŸ‘‰ parallÃ©lisation
    }


params = {
    "C": trial.suggest_float("C", 1e-2, 1e2, log=True),
    "gamma": trial.suggest_categorical("gamma", ["scale", "auto"]) or 
             trial.suggest_float("gamma", 1e-4, 1e-1, log=True),
    "kernel": trial.suggest_categorical("kernel", ["rbf", "poly", "sigmoid"]),
    "degree": trial.suggest_int("degree", 2, 5),  # si poly
    "class_weight": "balanced",
    "probability": True,
    "random_state": 42
}
